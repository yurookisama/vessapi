Harika! Sağladığınız bilgilerle "VessAPI" projesi için detaylı bir Ürün Gereksinimleri Belgesi (PRD) oluşturdum.

---
**Ürün Adı: VessAPI**

---

### 1. Temel Özellikler

#### 1.1 Müzik Yönetimi
* [x] Yeni müzik parçası ekleme (başlık, sanatçı, süre, dosya yolu, tür, yayınlanma tarihi, şarkı sözleri bilgileriyle).
* [x] Tüm müzik parçalarını listeleme.
* [x] Belirli bir müzik parçasını ID'ye göre detaylı görüntüleme.
* [x] Mevcut bir müzik parçasının bilgilerini güncelleme.
* [x] Belirli bir müzik parçasını silme.

#### 1.2 Albüm Yönetimi
* [x] Yeni albüm ekleme (başlık, sanatçı, yayınlanma tarihi, kapak görseli URL'si, tür, açıklama bilgileriyle).
* [x] Tüm albümleri listeleme.
* [x] Belirli bir albümü ID'ye göre detaylı görüntüleme.
* [x] Mevcut bir albümün bilgilerini güncelleme.
* [x] Belirli bir albümü silme.
* [x] Müzik parçalarını albümlerle ilişkilendirme.

#### 1.3 Kullanıcı Yönetimi ve Kimlik Doğrulama
* [x] Yeni kullanıcı kaydı oluşturma (kullanıcı adı, e-posta, şifre bilgileriyle).
* [x] Kullanıcı kimlik bilgileriyle oturum açma (JWT tabanlı kimlik doğrulama).
* [x] Tüm kullanıcıları listeleme.
* [x] Belirli bir kullanıcıyı ID'ye göre detaylı görüntüleme.
* [x] Kullanıcı bilgilerini güncelleme (şifre değişikliği dahil).
* [x] Kullanıcı hesabını silme.
* [x] Kullanıcı şifrelerinin güvenli bir şekilde hashlenerek saklanması.
* [x] Kullanıcı hesaplarının aktiflik durumunu yönetme.

#### 1.4 Çalma Listesi Yönetimi
* [x] Yeni çalma listesi oluşturma (ad, açıklama ve kullanıcı ID'si ile).
* [x] Kullanıcıya ait tüm çalma listelerini listeleme.
* [x] Belirli bir çalma listesini ID'ye göre detaylı görüntüleme.
* [x] Mevcut bir çalma listesinin bilgilerini güncelleme.
* [x] Belirli bir çalma listesini silme.
* [x] Çalma listelerinin herkese açık veya özel olma durumunu belirleme.

#### 1.5 Çalma Listesi İçerik Yönetimi
* [x] Belirli bir müziği belirli bir çalma listesine ekleme.
* [x] Belirli bir müziği belirli bir çalma listesinden çıkarma.
* [x] Belirli bir çalma listesindeki tüm müzik parçalarını listeleme.

#### 1.6 API Genel Davranış
* [x] Tüm API endpoint'leri için başarılı yanıtlar ve hata durumları için standart HTTP durum kodları kullanılması.
* [x] API yanıtlarının tutarlı bir JSON formatında olması.
* [x] Otomatik API dokümantasyonu (FastAPI'nin Swagger UI/ReDoc yeteneklerinden faydalanarak).

### 2. Teknik Altyapı

#### 2.1 Sistem Mimarisi ve Geliştirme Ortamı
* [x] Ana FastAPI uygulamasının `main.py` içinde tanımlanması.
* [x] Veritabanı bağlantısı ve ODM (Object-Document Mapper) başlatma işlemlerinin `database.py` dosyasında merkezi olarak yönetilmesi.
* [x] Veritabanı modellerinin (Beanie Documents) `models.py` dosyasında tanımlanması.
* [x] Pydantic veri modellerinin (istek ve yanıt şemaları) `schemas.py` dosyasında tanımlanması.
* [x] Veritabanı CRUD (Create, Read, Update, Delete) işlemlerinin `crud.py` içinde soyutlanması ve düzenlenmesi.
* [x] Proje bağımlılıklarının `requirements.txt` dosyasında listelenmesi.
* [x] Proje çalıştırma talimatları ve API dokümantasyonunun `README.md` dosyasında sunulması.

#### 2.2 Teknoloji Seçimi ve Entegrasyon
* [x] **Web Framework:** Python FastAPI
* [x] **Asenkron Kütüphane:** `asyncio`
* [x] **Veritabanı:** MongoDB
* [x] **ODM (Object-Document Mapper):** Beanie
* [x] **Veri Doğrulama/Serileştirme:** Pydantic
* [x] **Şifre Hashleme:** `passlib[bcrypt]`
* [x] **Web Sunucusu:** Uvicorn

#### 2.3 Veritabanı Modelleri (Beanie ODM)
* [x] `Music` modeli: `music_id` (UUID), `title`, `artist`, `album_id` (UUID, Nullable), `duration`, `file_path`, `genre`, `track_number`, `publish_date`, `lyrics`, `created_at`, `updated_at`.
* [x] `Album` modeli: `album_id` (UUID), `title`, `artist`, `release_date`, `cover_image_url`, `genre`, `description`, `music_ids` (List[UUID]), `created_at`, `updated_at`.
* [x] `User` modeli: `user_id` (UUID), `username` (Unique), `email` (Unique), `hashed_password`, `full_name`, `is_active`, `created_at`, `updated_at`.
* [x] `Playlist` modeli: `playlist_id` (UUID), `name`, `description`, `user_id` (UUID), `music_ids` (List[UUID]), `is_public`, `created_at`, `updated_at`.

#### 2.4 Pydantic Şemaları
* [x] Her veritabanı modeli için `Create`, `Update` ve `Response` şemalarının oluşturulması.
* [x] `UserResponse` şemasında `hashed_password` gibi hassas bilgilerin hariç tutulması.

#### 2.5 API Endpoint Tanımları
* [x] **Müzik Endpointleri:** `POST /music/`, `GET /music/`, `GET /music/{music_id}`, `PUT /music/{music_id}`, `DELETE /music/{music_id}`.
* [x] **Albüm Endpointleri:** `POST /albums/`, `GET /albums/`, `GET /albums/{album_id}`, `PUT /albums/{album_id}`, `DELETE /albums/{album_id}`.
* [x] **Kullanıcı Endpointleri:** `POST /users/`, `GET /users/`, `GET /users/{user_id}`, `PUT /users/{user_id}`, `DELETE /users/{user_id}`.
* [x] **Çalma Listesi Endpointleri:** `POST /playlists/`, `GET /playlists/`, `GET /playlists/{playlist_id}`, `PUT /playlists/{playlist_id}`, `DELETE /playlists/{playlist_id}`.
* [x] **Çalma Listesi Müzik İlişki Endpointleri:** `POST /playlists/{playlist_id}/music/{music_id}`, `DELETE /playlists/{playlist_id}/music/{music_id}`.

#### 2.6 Kurulum ve Geliştirme Adımları
* [x] MongoDB'nin yerel veya uzak bir sunucuda çalışır durumda olduğundan emin olun.
* [x] Proje dizinine geçin: `cd C:\Users\oozka\OneDrive\Masaüstü\projeler\app\VessAPI`
* [x] Bir sanal ortam oluşturun: `python -m venv venv`
* [x] Sanal ortamı etkinleştirin: `.\venv\Scripts\activate` (Windows için)
* [x] Gerekli kütüphaneleri yükleyin: `pip install -r requirements.txt`
* [x] Uygulamayı çalıştırın: `uvicorn main:app --reload`

---

Bu PRD, VessAPI projesinin hem kullanıcıya yönelik özelliklerini hem de temel teknik altyapısını net bir şekilde ortaya koymaktadır.

### 3. Gelecek İyileştirmeler ve Yol Haritası

#### 3.1 Eksik/İyileştirilebilecek Alanlar

*   **Web Arayüzü**
    *   [x] Kullanıcı kaydı ve müzik yükleme için basit web arayüzü

*   **Yetkilendirme (Authorization) Eksikliği**
    *   [x] Kullanıcıların sadece kendi kaynaklarını düzenleyebilmesi için yetki kontrolü
        *   Örneğin: Bir kullanıcının sadece kendi çalma listelerini düzenleyebilmesi

*   **Sayfalama (Pagination)**
    *   [x] Büyük veri setleri için `/music`, `/albums` gibi endpointlerde sayfalama desteği
        *   (Örn: `GET /music?skip=20&limit=10`)

*   **Arama ve Filtreleme**
    *   [x] Müzik/albüm arama endpointleri:
        ```python
        @app.get("/music/search/")
        async def search_music(q: str, genre: str = None):
        ```

*   **Dosya Yönetimi**
    *   [x] Müzik dosyalarının ve albüm kapaklarının yüklenmesi için endpointler
        *   (FastAPI'nin `File` ve `UploadFile` desteğiyle)

*   **İlişkisel Silme Politikaları**
    *   [x] Albüm silindiğinde ilişkili müzik parçalarına ne olacağının tanımlanması
    *   [x] Kullanıcı silindiğinde çalma listelerinin kaderi

#### 3.2 Güvenlik İyileştirmeleri

*   **Rate Limiting**
    *   [x] Brute-force saldırılara karşı oturum açma endpointine sınırlama

*   **Admin Rolü**
    *   [x] Yönetici kullanıcılar için özel yetkiler (tüm kullanıcıları silme vb.)

*   **Sensitive Data Masking**
    *   [x] `UserResponse` şemasında email gibi hassas verilerin kısmi maskelenmesi

#### 3.3 Kullanıcı Deneyimi

*   **Favori Mekanizması**
    *   [x] Kullanıcıların müzik/albüm favorileme endpointleri:
        *   `POST /users/{user_id}/favorites/music/{music_id}`

*   **Dinleme Geçmişi**
    *   [x] Kullanıcıların dinledikleri parçaların kaydı:
        *   `POST /users/{user_id}/listening-history`

#### 3.4 Teknik İyileştirmeler

*   **Background Tasks**
    *   [x] E-posta doğrulama, rapor oluşturma gibi işlemler için arka plan görevleri

*   **Health Check Endpoint**
    *   [x] Sistem durum kontrolü için basit endpoint:
        ```python
        @app.get("/health")
        async def health_check():
            return {"status": "ok", "database": "connected"}
        ```

*   **Önbellekleme (Caching)**
    *   [x] Sık erişilen veriler için Redis entegrasyonu (Örn: popüler çalma listeleri)

*   **WebSocket Desteği**
    *   [x] Gerçek zamanlı bildirimler için:
        ```python
        @app.websocket("/ws/notifications")
        ```

#### 3.5 Dağıtım ve Operasyon

*   **Dockerfile**
    *   [x] Konteynerleştirme için Docker yapılandırması

*   **Çevre Değişkenleri Yönetimi**
    *   [x] `.env` dosyaları için `pydantic-settings` entegrasyonu

*   **Logging Sistemi**
    *   [x] Yapılandırılmış loglama (JSON formatında)

#### 3.6 Son Tavsiyeler

*   **Swagger Dokümantasyonu İyileştirme**
    *   [x] Tüm endpointlere açıklayıcı docstring'ler ekleyin:
        ```python
        @app.post("/users/", response_model=schemas.UserResponse, summary="Yeni kullanıcı oluştur")
        ```

*   **Hata Yönetimi Standardizasyonu**
    *   [x] Özel exception handler'lar:
        ```python
        @app.exception_handler(UserNotFoundError)
        async def user_not_found_handler(...):
        ```

*   **API Versiyonlama**
    *   [x] Gelecekteki değişiklikler için:
        ```python
        app = FastAPI()
        v1 = APIRouter(prefix="/v1")
        v1.include_router(users.router)
        app.include_router(v1)
        ```

#### 3.7 Örnek Ek Tablo (İyileştirme Takibi)

| Özellik                     | Durum | Öncelik | Notlar                                      |
| :-------------------------- | :---- | :------ | :------------------------------------------ |
| Yetkilendirme Sistemi       | [x]   | Yüksek  | RBAC veya ABAC implementasyonu              |
| Sayfalama Desteği           | [x]   | Orta    | Tüm liste endpointlerine uygulanacak        |
| Dosya Yükleme Endpointleri  | [x]   | Yüksek  | Müzik dosyaları ve kapak resimleri için     |
| Dinleme Geçmişi             | [x]   | Düşük   | Kullanıcı davranış analizi için             |
| Web Arayüzü                 | [x]   | Yüksek  | Kullanıcı kaydı ve müzik yükleme için       |
| Health Check Endpoint       | [x]   | Düşük   | Sistem durum kontrolü için                  |
